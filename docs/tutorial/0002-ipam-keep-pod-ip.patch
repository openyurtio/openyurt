From ac7569e6e120732a8296e4f6e24b02bcc21911be Mon Sep 17 00:00:00 2001
From: "openyurt" <openyurt.io>
Date: Thu, 14 Mar 2019 17:51:27 +0800
Subject: [PATCH] - function: keep pod ip. - solution:    - add relationship
 between podNs/podName and pod ip and releationship is stored in a disk file
 that named by podIP_podns_podName    - if podName file exists, we will use
 the already reserved ip for the pod    - if podName file do not exists, go
 through the original process.    - fix ip of deleted pod can be reused when
 ip address walk around

---
 .../host-local/backend/allocator/allocator.go |  64 +++++++++-
 .../ipam/host-local/backend/disk/backend.go   | 117 +++++++++++++++++-
 plugins/ipam/host-local/backend/store.go      |   2 +
 .../host-local/backend/testing/fake_store.go  |  16 +++
 plugins/ipam/host-local/main.go               |  40 +++++-
 5 files changed, 234 insertions(+), 5 deletions(-)

diff --git a/plugins/ipam/host-local/backend/allocator/allocator.go b/plugins/ipam/host-local/backend/allocator/allocator.go
index 1d2964b..dac9b4b 100644
--- a/plugins/ipam/host-local/backend/allocator/allocator.go
+++ b/plugins/ipam/host-local/backend/allocator/allocator.go
@@ -40,10 +40,58 @@ func NewIPAllocator(s *RangeSet, store backend.Store, id int) *IPAllocator {
 	}
 }
 
-// Get alocates an IP
-func (a *IPAllocator) Get(id string, requestedIP net.IP) (*current.IPConfig, error) {
+// GetByPodNsAndName allocates an IP or used reserved IP for specified pod
+func (a *IPAllocator) GetByPodNsAndName(id string, requestedIP net.IP, podNs, podName string) (*current.IPConfig, error) {
 	a.store.Lock()
 	defer a.store.Unlock()
+	if len(podName) != 0 {
+		podIPIsExist, knownIP := a.store.HasReservedIP(podNs, podName)
+
+		if podIPIsExist {
+			// podName file is exist, update ip file with new container id.
+			_, err := a.store.ReservePodInfo(id, knownIP, podNs, podName, podIPIsExist)
+			if err != nil {
+				return nil, err
+			}
+
+			reservedIP, gw := a.GetGWofKnowIP(knownIP)
+			if reservedIP == nil {
+				return nil, fmt.Errorf("no IP addresses available in range set: %s", a.rangeset.String())
+			}
+			version := "4"
+			if reservedIP.IP.To4() == nil {
+				version = "6"
+			}
+
+			return &current.IPConfig{
+				Version: version,
+				Address: *reservedIP,
+				Gateway: gw,
+			}, nil
+		} else {
+			// reserve ip for new pod
+			ipCfg, err := a.Get(id, requestedIP)
+			if err != nil {
+				return ipCfg, err
+			}
+
+			if ipCfg != nil {
+				_, err := a.store.ReservePodInfo(id, ipCfg.Address.IP, podNs, podName, podIPIsExist)
+				if err != nil {
+					return ipCfg, err
+				}
+			}
+			return ipCfg, nil
+		}
+	}
+
+	return a.Get(id, requestedIP)
+}
+
+// Get alocates an IP
+func (a *IPAllocator) Get(id string, requestedIP net.IP) (*current.IPConfig, error) {
+	//a.store.Lock()
+	//defer a.store.Unlock()
 
 	var reservedIP *net.IPNet
 	var gw net.IP
@@ -117,6 +165,18 @@ func (a *IPAllocator) Release(id string) error {
 	return a.store.ReleaseByID(id)
 }
 
+// GetGWofKnowIP returns the known IP, its mask, and its gateway
+func (a *IPAllocator) GetGWofKnowIP(ip net.IP) (*net.IPNet, net.IP) {
+	rg := Range{}
+	for i, r := range *a.rangeset {
+		if r.Contains(ip) {
+			rg = (*a.rangeset)[i]
+			break
+		}
+	}
+	return &net.IPNet{IP: ip, Mask: rg.Subnet.Mask}, rg.Gateway
+}
+
 type RangeIter struct {
 	rangeset *RangeSet
 
diff --git a/plugins/ipam/host-local/backend/disk/backend.go b/plugins/ipam/host-local/backend/disk/backend.go
index 08bb4eb..abfd110 100644
--- a/plugins/ipam/host-local/backend/disk/backend.go
+++ b/plugins/ipam/host-local/backend/disk/backend.go
@@ -15,6 +15,7 @@
 package disk
 
 import (
+	"fmt"
 	"io/ioutil"
 	"net"
 	"os"
@@ -67,11 +68,11 @@ func (s *Store) Reserve(id string, ip net.IP, rangeID string) (bool, error) {
 	}
 	if _, err := f.WriteString(strings.TrimSpace(id)); err != nil {
 		f.Close()
-		os.Remove(f.Name())
+		os.Remove(fname)
 		return false, err
 	}
 	if err := f.Close(); err != nil {
-		os.Remove(f.Name())
+		os.Remove(fname)
 		return false, err
 	}
 	// store the reserved ip in lastIPFile
@@ -124,3 +125,115 @@ func GetEscapedPath(dataDir string, fname string) string {
 	}
 	return filepath.Join(dataDir, fname)
 }
+
+// edge k8s: HasReservedIP verify the pod already had reserved ip or not.
+// and return the reserved ip on the other hand.
+func (s *Store) HasReservedIP(podNs, podName string) (bool, net.IP) {
+	ip := net.IP{}
+	if len(podName) == 0 {
+		return false, ip
+	}
+
+	// Pod, ip mapping info are recorded with file name: PodIP_PodNs_PodName
+	podIPNsNameFileName, err := s.findPodFileName("", podNs, podName)
+	if err != nil {
+		return false, ip
+	}
+
+	if len(podIPNsNameFileName) != 0 {
+		ipStr, ns, name := resolvePodFileName(podIPNsNameFileName)
+		if ns == podNs && name == podName {
+			ip = net.ParseIP(ipStr)
+			if ip != nil {
+				return true, ip
+			}
+		}
+	}
+
+	return false, ip
+}
+
+// edge k8s: ReservePodInfo create podName file for storing ip or update ip file with container id
+// in terms of podIPIsExist
+func (s *Store) ReservePodInfo(id string, ip net.IP, podNs, podName string, podIPIsExist bool) (bool, error) {
+	if podIPIsExist {
+		// pod Ns/Name file is exist, update ip file with new container id.
+		fname := GetEscapedPath(s.dataDir, ip.String())
+		err := ioutil.WriteFile(fname, []byte(strings.TrimSpace(id)), 0644)
+		if err != nil {
+			return false, err
+		}
+	} else {
+		// for new pod, create a new file named "PodIP_PodNs_PodName",
+		// if there is already file named with prefix "ip_", rename the old file with new PodNs and PodName.
+		if len(podName) != 0 {
+			podIPNsNameFile := GetEscapedPath(s.dataDir, podFileName(ip.String(), podNs, podName))
+			podIPNsNameFileName, err := s.findPodFileName(ip.String(), "", "")
+			if err != nil {
+				return false, err
+			}
+
+			if len(podIPNsNameFileName) != 0 {
+				oldPodIPNsNameFile := GetEscapedPath(s.dataDir, podIPNsNameFileName)
+				err = os.Rename(oldPodIPNsNameFile, podIPNsNameFile)
+				if err != nil {
+					return false, err
+				} else {
+					return true, nil
+				}
+			}
+
+			err = ioutil.WriteFile(podIPNsNameFile, []byte{}, 0644)
+			if err != nil {
+				return false, err
+			}
+		}
+	}
+
+	return true, nil
+}
+
+func podFileName(ip, ns, name string) string {
+	if len(ip) != 0 && len(ns) != 0 {
+		return fmt.Sprintf("%s_%s_%s", ip, ns, name)
+	}
+
+	return name
+}
+
+func resolvePodFileName(fName string) (ip, ns, name string) {
+	parts := strings.Split(fName, "_")
+	if len(parts) == 3 {
+		ip = parts[0]
+		ns = parts[1]
+		name = parts[2]
+	}
+
+	return
+}
+
+func (s *Store) findPodFileName(ip, ns, name string) (string, error) {
+	var pattern string
+	if len(ip) != 0 {
+		pattern = fmt.Sprintf("%s_*", ip)
+	} else if len(ns) != 0 && len(name) != 0 {
+		pattern = fmt.Sprintf("*_%s_%s", ns, name)
+	} else {
+		return "", nil
+	}
+	pattern = GetEscapedPath(s.dataDir, pattern)
+
+	podFiles, err := filepath.Glob(pattern)
+	if err != nil {
+		return "", err
+	}
+
+	if len(podFiles) == 1 {
+		_, fName := filepath.Split(podFiles[0])
+		if strings.Count(fName, "_") == 2 {
+			return fName, nil
+		}
+	}
+
+	return "", nil
+}
diff --git a/plugins/ipam/host-local/backend/store.go b/plugins/ipam/host-local/backend/store.go
index 3d69584..8e83057 100644
--- a/plugins/ipam/host-local/backend/store.go
+++ b/plugins/ipam/host-local/backend/store.go
@@ -24,4 +24,6 @@ type Store interface {
 	LastReservedIP(rangeID string) (net.IP, error)
 	Release(ip net.IP) error
 	ReleaseByID(id string) error
+	HasReservedIP(podNs, podName string) (bool, net.IP)
+	ReservePodInfo(id string, ip net.IP, podNs, podName string, podIPIsExist bool) (bool, error)
 }
diff --git a/plugins/ipam/host-local/backend/testing/fake_store.go b/plugins/ipam/host-local/backend/testing/fake_store.go
index 49a0f55..47f5836 100644
--- a/plugins/ipam/host-local/backend/testing/fake_store.go
+++ b/plugins/ipam/host-local/backend/testing/fake_store.go
@@ -84,3 +84,19 @@ func (s *FakeStore) ReleaseByID(id string) error {
 func (s *FakeStore) SetIPMap(m map[string]string) {
 	s.ipMap = m
 }
+
+func (s *FakeStore) ReleaseByPodName(podName string) error {
+	return nil
+}
+
+func (s *FakeStore) HasReservedIP(podName string) (bool, net.IP) {
+	ip := net.IP{}
+	if podName == "" {
+		return false, ip
+	}
+	return false, ip
+}
+
+func (s *FakeStore) ReservePodInfo(id string, ip net.IP, podName string, podIsExist bool) (bool, error) {
+	return true, nil
+}
diff --git a/plugins/ipam/host-local/main.go b/plugins/ipam/host-local/main.go
index 9e2bacc..c6c09e5 100644
--- a/plugins/ipam/host-local/main.go
+++ b/plugins/ipam/host-local/main.go
@@ -32,6 +32,38 @@ func main() {
 	skel.PluginMain(cmdAdd, cmdDel, version.All)
 }
 
+//Args: [][2]string{
+//{"IgnoreUnknown", "1"},
+//{"K8S_POD_NAMESPACE", podNs},
+//{"K8S_POD_NAME", podName},
+//{"K8S_POD_INFRA_CONTAINER_ID", podSandboxID.ID},
+//},
+func resolvePodNsAndNameFromEnvArgs(envArgs string) (string, string, error) {
+	var ns, name string
+	if envArgs == "" {
+		return ns, name, nil
+	}
+
+	pairs := strings.Split(envArgs, ";")
+	for _, pair := range pairs {
+		kv := strings.Split(pair, "=")
+		if len(kv) != 2 {
+			return ns, name, fmt.Errorf("ARGS: invalid pair %q", pair)
+		}
+
+		if kv[0] == "K8S_POD_NAMESPACE" {
+			ns = kv[1]
+		} else if kv[0] == "K8S_POD_NAME" {
+			name = kv[1]
+		}
+	}
+
+	if len(ns)+len(name) > 230 {
+		return "", "", fmt.Errorf("ARGS: length of pod ns and name exceed the length limit")
+	}
+	return ns, name, nil
+}
+
 func cmdAdd(args *skel.CmdArgs) error {
 	ipamConf, confVersion, err := allocator.LoadIPAMConfig(args.StdinData, args.Args)
 	if err != nil {
@@ -79,7 +111,13 @@ func cmdAdd(args *skel.CmdArgs) error {
 			}
 		}
 
-		ipConf, err := allocator.Get(args.ContainerID, requestedIP)
+		// get pod namespace and pod name
+		podNs, podName, err := resolvePodNsAndNameFromEnvArgs(args.Args)
+		if err != nil {
+			return fmt.Errorf("failed to get pod ns/name from env args: %s", err)
+		}
+
+		ipConf, err := allocator.GetByPodNsAndName(args.ContainerID, requestedIP, podNs, podName)
 		if err != nil {
 			// Deallocate all already allocated IPs
 			for _, alloc := range allocs {
-- 
2.23.0

