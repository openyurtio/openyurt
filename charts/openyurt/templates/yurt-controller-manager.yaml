apiVersion: v1
kind: ServiceAccount
metadata:
  name: yurt-controller-manager
  namespace: {{ .Release.Namespace | quote }}

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  name: yurt-controller-manager
rules:
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
      - update
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - list
      - update
      - watch
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - create
      - update
      - list
      - patch
  - apiGroups:
      - ""
      - events.k8s.io
    resources:
      - events
    verbs:
      - create
      - patch
      - update
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs:
      - create
      - delete
      - get
      - patch
      - update
      - list
      - watch
  - apiGroups:
      - ""
      - apps
    resources:
      - daemonsets
    verbs:
      - list
      - watch
  - apiGroups:
      - certificates.k8s.io
    resources:
      - certificatesigningrequests
    verbs:
      - create
      - get
      - list
      - watch
  - apiGroups:
      - certificates.k8s.io
    resources:
      - certificatesigningrequests/approval
    verbs:
      - update
  - apiGroups:
      - certificates.k8s.io
    resources:
      - signers
    resourceNames:
      - kubernetes.io/kube-apiserver-client
      - kubernetes.io/kubelet-serving
    verbs:
      - approve
  - apiGroups:
      - discovery.k8s.io
    resources:
      - endpointslices
    verbs:
      - get
      - list
      - watch
      - patch
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - get
      - list
      - watch
      - patch
  - apiGroups:
      - "apps.openyurt.io"
    resources:
      - nodepools
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: yurt-controller-manager
subjects:
  - kind: ServiceAccount
    name: yurt-controller-manager
    namespace: {{ .Release.Namespace | quote }}
roleRef:
  kind: ClusterRole
  name: yurt-controller-manager
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: yurt-controller-manager
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "yurt-controller-manager.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "yurt-controller-manager.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "yurt-controller-manager.selectorLabels" . | nindent 8 }}
    spec:
      serviceAccountName: yurt-controller-manager
      hostNetwork: true
      imagePullSecrets:
        - name: regsecret
      tolerations:
        - operator: "Exists"
      affinity:
        nodeAffinity:
          # we prefer allocating ecm on cloud node
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
              - key: openyurt.io/is-edge-worker
                operator: In
                values:
                - "false"
      containers:
      - name: yurt-controller-manager
        image: "{{ .Values.yurtControllerManager.image.registry }}/{{ .Values.yurtControllerManager.image.repository }}:{{ .Values.yurtControllerManager.image.tag }}"
        imagePullPolicy: {{ .Values.yurtControllerManager.image.pullPolicy }}
        command:
          - yurt-controller-manager
        {{- if .Values.imagePullSecrets }}
        imagePullSecrets:
          {{ toYaml .Values.imagePullSecrets | nindent 10 }}
        {{- end }}
        ports:
          - name: webhook-server
            containerPort: {{ .Values.admissionWebhooks.service.port }}
            protocol: TCP
          - name: health
            containerPort: 8000
            protocol: TCP
        env:
          - name: WEBHOOK_CERT_DIR
            value: {{ .Values.admissionWebhooks.certificate.mountPath }}
          - name: WEBHOOK_SERVICE_PORT
            value: {{ .Values.admissionWebhooks.service.port | quote }}
          - name: WEBHOOK_SERVICE_NAME
            value: {{ template "yurt-controller-manager.fullname" . }}-webhook
          - name: WEBHOOK_NAMESPACE
            value: {{ .Release.Namespace }}
          - name: WEBHOOK_POD_VALIDATING_CONFIGURATION_NAME
            value: {{ template "yurt-controller-manager.fullname" . }}
          - name: WEBHOOK_POD_MUTATING_CONFIGURATION_NAME
            value: {{ template "yurt-controller-manager.fullname" . }}
          - name: WEBHOOK_POD_VALIDATING_NAME
            value: {{ .Values.admissionWebhooks.names.validatingWebhookName }}
          - name: WEBHOOK_POD_MUTATING_NAME
            value: {{ .Values.admissionWebhooks.names.mutatingWebhookName }}
          - name: WEBHOOK_POD_VALIDATING_PATH
            value: {{ .Values.admissionWebhooks.names.webhookPodValidatingPath }}
          - name: WEBHOOK_POD_MUTATING_PATH
            value: {{ .Values.admissionWebhooks.names.webhookPodMutatingPath }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ template "yurt-controller-manager.name" . }}-webhook
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "yurt-controller-manager.labels" . | nindent 4 }}
spec:
  type: {{ .Values.admissionWebhooks.service.type }}
  ports:
    - port: 443
      targetPort: {{ .Values.admissionWebhooks.service.port }}
      protocol: TCP
      name: https
  selector:
      {{ include "yurt-controller-manager.selectorLabels" . | nindent 6 }}
