# ---------------------------------------------------
#
# Manifest generated by controller-gen. DO NOT EDIT !!!
# You can view the "make manifests" command in Makefile
#
# ---------------------------------------------------

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.7.0
  creationTimestamp: null
  name: gateways.raven.openyurt.io
spec:
  group: raven.openyurt.io
  names:
    categories:
    - all
    kind: Gateway
    listKind: GatewayList
    plural: gateways
    shortNames:
    - gw
    singular: gateway
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.activeEndpoint.nodeName
      name: ActiveEndpoint
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Gateway is the Schema for the gateways API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: GatewaySpec defines the desired state of Gateway
            properties:
              endpoints:
                description: TODO add a field to configure using vxlan or host-gw
                  for inner gateway communication? Endpoints is a list of available
                  Endpoint.
                items:
                  description: Endpoint stores all essential data for establishing
                    the VPN tunnel. TODO add priority field?
                  properties:
                    config:
                      additionalProperties:
                        type: string
                      type: object
                    nodeName:
                      description: NodeName is the Node hosting this endpoint.
                      type: string
                    publicIP:
                      type: string
                    underNAT:
                      type: boolean
                  required:
                  - nodeName
                  type: object
                type: array
              exposeType:
                description: ExposeType determines how the Gateway is exposed.
                type: string
              nodeSelector:
                description: NodeSelector is a label query over nodes that managed
                  by the gateway. The nodes in the same gateway should share same
                  layer 3 network.
                properties:
                  matchExpressions:
                    description: matchExpressions is a list of label selector requirements.
                      The requirements are ANDed.
                    items:
                      description: A label selector requirement is a selector that
                        contains values, a key, and an operator that relates the key
                        and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies
                            to.
                          type: string
                        operator:
                          description: operator represents a key's relationship to
                            a set of values. Valid operators are In, NotIn, Exists
                            and DoesNotExist.
                          type: string
                        values:
                          description: values is an array of string values. If the
                            operator is In or NotIn, the values array must be non-empty.
                            If the operator is Exists or DoesNotExist, the values
                            array must be empty. This array is replaced during a strategic
                            merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: matchLabels is a map of {key,value} pairs. A single
                      {key,value} in the matchLabels map is equivalent to an element
                      of matchExpressions, whose key field is "key", the operator
                      is "In", and the values array contains only "value". The requirements
                      are ANDed.
                    type: object
                type: object
            required:
            - endpoints
            type: object
          status:
            description: GatewayStatus defines the observed state of Gateway
            properties:
              activeEndpoint:
                description: ActiveEndpoint is the reference of the active endpoint.
                properties:
                  config:
                    additionalProperties:
                      type: string
                    type: object
                  nodeName:
                    description: NodeName is the Node hosting this endpoint.
                    type: string
                  publicIP:
                    type: string
                  underNAT:
                    type: boolean
                required:
                - nodeName
                type: object
              nodes:
                description: Nodes contains all information of nodes managed by Gateway.
                items:
                  description: NodeInfo stores information of node managed by Gateway.
                  properties:
                    nodeName:
                      type: string
                    privateIP:
                      type: string
                    subnets:
                      items:
                        type: string
                      type: array
                  required:
                  - nodeName
                  - privateIP
                  - subnets
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.7.0
  creationTimestamp: null
  name: nodepools.apps.openyurt.io
spec:
  group: apps.openyurt.io
  names:
    categories:
    - all
    kind: NodePool
    listKind: NodePoolList
    plural: nodepools
    shortNames:
    - np
    singular: nodepool
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - description: The type of nodepool
      jsonPath: .spec.type
      name: Type
      type: string
    - description: The number of ready nodes in the pool
      jsonPath: .status.readyNodeNum
      name: ReadyNodes
      type: integer
    - jsonPath: .status.unreadyNodeNum
      name: NotReadyNodes
      type: integer
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    deprecated: true
    deprecationWarning: apps.openyurt.io/v1alpha1 NodePool is deprecated in v1.0.0+,
      unavailable in v1.2.0+; use apps.openyurt.io/v1beta1 NodePool
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: NodePool is the Schema for the nodepools API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: NodePoolSpec defines the desired state of NodePool
            properties:
              annotations:
                additionalProperties:
                  type: string
                description: 'If specified, the Annotations will be added to all nodes.
                  NOTE: existing labels with samy keys on the nodes will be overwritten.'
                type: object
              labels:
                additionalProperties:
                  type: string
                description: 'If specified, the Labels will be added to all nodes.
                  NOTE: existing labels with samy keys on the nodes will be overwritten.'
                type: object
              selector:
                description: A label query over nodes to consider for adding to the
                  pool
                properties:
                  matchExpressions:
                    description: matchExpressions is a list of label selector requirements.
                      The requirements are ANDed.
                    items:
                      description: A label selector requirement is a selector that
                        contains values, a key, and an operator that relates the key
                        and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies
                            to.
                          type: string
                        operator:
                          description: operator represents a key's relationship to
                            a set of values. Valid operators are In, NotIn, Exists
                            and DoesNotExist.
                          type: string
                        values:
                          description: values is an array of string values. If the
                            operator is In or NotIn, the values array must be non-empty.
                            If the operator is Exists or DoesNotExist, the values
                            array must be empty. This array is replaced during a strategic
                            merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: matchLabels is a map of {key,value} pairs. A single
                      {key,value} in the matchLabels map is equivalent to an element
                      of matchExpressions, whose key field is "key", the operator
                      is "In", and the values array contains only "value". The requirements
                      are ANDed.
                    type: object
                type: object
              taints:
                description: If specified, the Taints will be added to all nodes.
                items:
                  description: The node this Taint is attached to has the "effect"
                    on any pod that does not tolerate the Taint.
                  properties:
                    effect:
                      description: Required. The effect of the taint on pods that
                        do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule
                        and NoExecute.
                      type: string
                    key:
                      description: Required. The taint key to be applied to a node.
                      type: string
                    timeAdded:
                      description: TimeAdded represents the time at which the taint
                        was added. It is only written for NoExecute taints.
                      format: date-time
                      type: string
                    value:
                      description: The taint value corresponding to the taint key.
                      type: string
                  required:
                  - effect
                  - key
                  type: object
                type: array
              type:
                description: The type of the NodePool
                type: string
            type: object
          status:
            description: NodePoolStatus defines the observed state of NodePool
            properties:
              nodes:
                description: The list of nodes' names in the pool
                items:
                  type: string
                type: array
              readyNodeNum:
                description: Total number of ready nodes in the pool.
                format: int32
                type: integer
              unreadyNodeNum:
                description: Total number of unready nodes in the pool.
                format: int32
                type: integer
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
  - additionalPrinterColumns:
    - description: The type of nodepool
      jsonPath: .spec.type
      name: Type
      type: string
    - description: The number of ready nodes in the pool
      jsonPath: .status.readyNodeNum
      name: ReadyNodes
      type: integer
    - jsonPath: .status.unreadyNodeNum
      name: NotReadyNodes
      type: integer
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1beta1
    schema:
      openAPIV3Schema:
        description: NodePool is the Schema for the nodepools API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: NodePoolSpec defines the desired state of NodePool
            properties:
              annotations:
                additionalProperties:
                  type: string
                description: 'If specified, the Annotations will be added to all nodes.
                  NOTE: existing labels with samy keys on the nodes will be overwritten.'
                type: object
              labels:
                additionalProperties:
                  type: string
                description: 'If specified, the Labels will be added to all nodes.
                  NOTE: existing labels with samy keys on the nodes will be overwritten.'
                type: object
              selector:
                description: A label query over nodes to consider for adding to the
                  pool
                properties:
                  matchExpressions:
                    description: matchExpressions is a list of label selector requirements.
                      The requirements are ANDed.
                    items:
                      description: A label selector requirement is a selector that
                        contains values, a key, and an operator that relates the key
                        and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies
                            to.
                          type: string
                        operator:
                          description: operator represents a key's relationship to
                            a set of values. Valid operators are In, NotIn, Exists
                            and DoesNotExist.
                          type: string
                        values:
                          description: values is an array of string values. If the
                            operator is In or NotIn, the values array must be non-empty.
                            If the operator is Exists or DoesNotExist, the values
                            array must be empty. This array is replaced during a strategic
                            merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: matchLabels is a map of {key,value} pairs. A single
                      {key,value} in the matchLabels map is equivalent to an element
                      of matchExpressions, whose key field is "key", the operator
                      is "In", and the values array contains only "value". The requirements
                      are ANDed.
                    type: object
                type: object
              taints:
                description: If specified, the Taints will be added to all nodes.
                items:
                  description: The node this Taint is attached to has the "effect"
                    on any pod that does not tolerate the Taint.
                  properties:
                    effect:
                      description: Required. The effect of the taint on pods that
                        do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule
                        and NoExecute.
                      type: string
                    key:
                      description: Required. The taint key to be applied to a node.
                      type: string
                    timeAdded:
                      description: TimeAdded represents the time at which the taint
                        was added. It is only written for NoExecute taints.
                      format: date-time
                      type: string
                    value:
                      description: The taint value corresponding to the taint key.
                      type: string
                  required:
                  - effect
                  - key
                  type: object
                type: array
              type:
                description: The type of the NodePool
                type: string
            type: object
          status:
            description: NodePoolStatus defines the observed state of NodePool
            properties:
              nodes:
                description: The list of nodes' names in the pool
                items:
                  type: string
                type: array
              readyNodeNum:
                description: Total number of ready nodes in the pool.
                format: int32
                type: integer
              unreadyNodeNum:
                description: Total number of unready nodes in the pool.
                format: int32
                type: integer
            type: object
        type: object
    served: true
    storage: false
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.7.0
  creationTimestamp: null
  name: staticpods.apps.openyurt.io
spec:
  group: apps.openyurt.io
  names:
    kind: StaticPod
    listKind: StaticPodList
    plural: staticpods
    shortNames:
    - sp
    singular: staticpod
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: CreationTimestamp is a timestamp representing the server time when
        this object was created. It is not guaranteed to be set in happens-before
        order across separate operations. Clients may not set this value. It is represented
        in RFC3339 form and is in UTC.
      jsonPath: .metadata.creationTimestamp
      name: AGE
      type: date
    - description: The total number of static pods
      jsonPath: .status.totalNumber
      name: TotalNumber
      type: integer
    - description: The number of ready static pods
      jsonPath: .status.readyNumber
      name: ReadyNumber
      type: integer
    - description: The number of static pods that have been upgraded
      jsonPath: .status.upgradedNumber
      name: UpgradedNumber
      type: integer
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: StaticPod is the Schema for the staticpods API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: StaticPodSpec defines the desired state of StaticPod
            properties:
              revisionHistoryLimit:
                description: The number of old history to retain to allow rollback.
                  Defaults to 10.
                format: int32
                type: integer
              staticPodManifest:
                description: StaticPodManifest indicates the Static Pod desired to
                  be upgraded. The corresponding manifest file name is `StaticPodManifest.yaml`.
                type: string
              template:
                description: An object that describes the desired upgrade static pod.
                x-kubernetes-preserve-unknown-fields: true
              upgradeStrategy:
                description: An upgrade strategy to replace existing static pods with
                  new ones.
                properties:
                  maxUnavailable:
                    anyOf:
                    - type: integer
                    - type: string
                    description: Auto upgrade config params. Present only if type
                      = "auto".
                    x-kubernetes-int-or-string: true
                  type:
                    description: Type of Static Pod upgrade. Can be "auto" or "ota".
                    type: string
                type: object
            type: object
          status:
            description: StaticPodStatus defines the observed state of StaticPod
            properties:
              observedGeneration:
                description: The most recent generation observed by the static pod
                  controller.
                format: int64
                type: integer
              readyNumber:
                description: The number of ready static pods.
                format: int32
                type: integer
              totalNumber:
                description: The total number of nodes that are running the static
                  pod.
                format: int32
                type: integer
              upgradedNumber:
                description: The number of nodes that are running updated static pod.
                format: int32
                type: integer
            required:
            - readyNumber
            - totalNumber
            - upgradedNumber
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.7.0
  creationTimestamp: null
  name: yurtappdaemons.apps.openyurt.io
spec:
  group: apps.openyurt.io
  names:
    categories:
    - all
    kind: YurtAppDaemon
    listKind: YurtAppDaemonList
    plural: yurtappdaemons
    shortNames:
    - yad
    singular: yurtappdaemon
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: The WorkloadTemplate Type.
      jsonPath: .status.templateType
      name: WorkloadTemplate
      type: string
    - description: CreationTimestamp is a timestamp representing the server time when
        this object was created. It is not guaranteed to be set in happens-before
        order across separate operations. Clients may not set this value. It is represented
        in RFC3339 form and is in UTC.
      jsonPath: .metadata.creationTimestamp
      name: AGE
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: YurtAppDaemon is the Schema for the samples API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: YurtAppDaemonSpec defines the desired state of YurtAppDaemon
            properties:
              nodepoolSelector:
                description: NodePoolSelector is a label query over nodepool that
                  should match the replica count. It must match the nodepool's labels.
                properties:
                  matchExpressions:
                    description: matchExpressions is a list of label selector requirements.
                      The requirements are ANDed.
                    items:
                      description: A label selector requirement is a selector that
                        contains values, a key, and an operator that relates the key
                        and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies
                            to.
                          type: string
                        operator:
                          description: operator represents a key's relationship to
                            a set of values. Valid operators are In, NotIn, Exists
                            and DoesNotExist.
                          type: string
                        values:
                          description: values is an array of string values. If the
                            operator is In or NotIn, the values array must be non-empty.
                            If the operator is Exists or DoesNotExist, the values
                            array must be empty. This array is replaced during a strategic
                            merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: matchLabels is a map of {key,value} pairs. A single
                      {key,value} in the matchLabels map is equivalent to an element
                      of matchExpressions, whose key field is "key", the operator
                      is "In", and the values array contains only "value". The requirements
                      are ANDed.
                    type: object
                type: object
              revisionHistoryLimit:
                description: Indicates the number of histories to be conserved. If
                  unspecified, defaults to 10.
                format: int32
                type: integer
              selector:
                description: Selector is a label query over pods that should match
                  the replica count. It must match the pod template's labels.
                properties:
                  matchExpressions:
                    description: matchExpressions is a list of label selector requirements.
                      The requirements are ANDed.
                    items:
                      description: A label selector requirement is a selector that
                        contains values, a key, and an operator that relates the key
                        and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies
                            to.
                          type: string
                        operator:
                          description: operator represents a key's relationship to
                            a set of values. Valid operators are In, NotIn, Exists
                            and DoesNotExist.
                          type: string
                        values:
                          description: values is an array of string values. If the
                            operator is In or NotIn, the values array must be non-empty.
                            If the operator is Exists or DoesNotExist, the values
                            array must be empty. This array is replaced during a strategic
                            merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: matchLabels is a map of {key,value} pairs. A single
                      {key,value} in the matchLabels map is equivalent to an element
                      of matchExpressions, whose key field is "key", the operator
                      is "In", and the values array contains only "value". The requirements
                      are ANDed.
                    type: object
                type: object
              workloadTemplate:
                description: WorkloadTemplate describes the pool that will be created.
                properties:
                  deploymentTemplate:
                    description: Deployment template
                    properties:
                      metadata:
                        x-kubernetes-preserve-unknown-fields: true
                      spec:
                        x-kubernetes-preserve-unknown-fields: true
                    required:
                    - spec
                    type: object
                  statefulSetTemplate:
                    description: StatefulSet template
                    properties:
                      metadata:
                        x-kubernetes-preserve-unknown-fields: true
                      spec:
                        x-kubernetes-preserve-unknown-fields: true
                    required:
                    - spec
                    type: object
                type: object
            required:
            - nodepoolSelector
            - selector
            type: object
          status:
            description: YurtAppDaemonStatus defines the observed state of YurtAppDaemon
            properties:
              collisionCount:
                description: Count of hash collisions for the YurtAppDaemon. The YurtAppDaemon
                  controller uses this field as a collision avoidance mechanism when
                  it needs to create the name for the newest ControllerRevision.
                format: int32
                type: integer
              conditions:
                description: Represents the latest available observations of a YurtAppDaemon's
                  current state.
                items:
                  description: YurtAppDaemonCondition describes current state of a
                    YurtAppDaemon.
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition.
                      type: string
                    reason:
                      description: The reason for the condition's last transition.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of in place set condition.
                      type: string
                  type: object
                type: array
              currentRevision:
                description: CurrentRevision, if not empty, indicates the current
                  version of the YurtAppDaemon.
                type: string
              nodepools:
                description: NodePools indicates the list of node pools selected by
                  YurtAppDaemon
                items:
                  type: string
                type: array
              observedGeneration:
                description: ObservedGeneration is the most recent generation observed
                  for this YurtAppDaemon. It corresponds to the YurtAppDaemon's generation,
                  which is updated on mutation by the API Server.
                format: int64
                type: integer
              templateType:
                description: TemplateType indicates the type of PoolTemplate
                type: string
            required:
            - currentRevision
            - templateType
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.7.0
  creationTimestamp: null
  name: yurtappsets.apps.openyurt.io
spec:
  group: apps.openyurt.io
  names:
    kind: YurtAppSet
    listKind: YurtAppSetList
    plural: yurtappsets
    shortNames:
    - yas
    singular: yurtappset
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: The number of pods ready.
      jsonPath: .status.readyReplicas
      name: READY
      type: integer
    - description: The WorkloadTemplate Type.
      jsonPath: .status.templateType
      name: WorkloadTemplate
      type: string
    - description: CreationTimestamp is a timestamp representing the server time when
        this object was created. It is not guaranteed to be set in happens-before
        order across separate operations. Clients may not set this value. It is represented
        in RFC3339 form and is in UTC.
      jsonPath: .metadata.creationTimestamp
      name: AGE
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: YurtAppSet is the Schema for the yurtAppSets API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: YurtAppSetSpec defines the desired state of YurtAppSet.
            properties:
              revisionHistoryLimit:
                description: Indicates the number of histories to be conserved. If
                  unspecified, defaults to 10.
                format: int32
                type: integer
              selector:
                description: Selector is a label query over pods that should match
                  the replica count. It must match the pod template's labels.
                properties:
                  matchExpressions:
                    description: matchExpressions is a list of label selector requirements.
                      The requirements are ANDed.
                    items:
                      description: A label selector requirement is a selector that
                        contains values, a key, and an operator that relates the key
                        and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies
                            to.
                          type: string
                        operator:
                          description: operator represents a key's relationship to
                            a set of values. Valid operators are In, NotIn, Exists
                            and DoesNotExist.
                          type: string
                        values:
                          description: values is an array of string values. If the
                            operator is In or NotIn, the values array must be non-empty.
                            If the operator is Exists or DoesNotExist, the values
                            array must be empty. This array is replaced during a strategic
                            merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: matchLabels is a map of {key,value} pairs. A single
                      {key,value} in the matchLabels map is equivalent to an element
                      of matchExpressions, whose key field is "key", the operator
                      is "In", and the values array contains only "value". The requirements
                      are ANDed.
                    type: object
                type: object
              topology:
                description: Topology describes the pods distribution detail between
                  each of pools.
                properties:
                  pools:
                    description: Contains the details of each pool. Each element in
                      this array represents one pool which will be provisioned and
                      managed by YurtAppSet.
                    items:
                      description: Pool defines the detail of a pool.
                      properties:
                        name:
                          description: Indicates pool name as a DNS_LABEL, which will
                            be used to generate pool workload name prefix in the format
                            '<deployment-name>-<pool-name>-'. Name should be unique
                            between all of the pools under one YurtAppSet. Name is
                            NodePool Name
                          type: string
                        nodeSelectorTerm:
                          description: Indicates the node selector to form the pool.
                            Depending on the node selector, pods provisioned could
                            be distributed across multiple groups of nodes. A pool's
                            nodeSelectorTerm is not allowed to be updated.
                          properties:
                            matchExpressions:
                              description: A list of node selector requirements by
                                node's labels.
                              items:
                                description: A node selector requirement is a selector
                                  that contains values, a key, and an operator that
                                  relates the key and values.
                                properties:
                                  key:
                                    description: The label key that the selector applies
                                      to.
                                    type: string
                                  operator:
                                    description: Represents a key's relationship to
                                      a set of values. Valid operators are In, NotIn,
                                      Exists, DoesNotExist. Gt, and Lt.
                                    type: string
                                  values:
                                    description: An array of string values. If the
                                      operator is In or NotIn, the values array must
                                      be non-empty. If the operator is Exists or DoesNotExist,
                                      the values array must be empty. If the operator
                                      is Gt or Lt, the values array must have a single
                                      element, which will be interpreted as an integer.
                                      This array is replaced during a strategic merge
                                      patch.
                                    items:
                                      type: string
                                    type: array
                                required:
                                - key
                                - operator
                                type: object
                              type: array
                            matchFields:
                              description: A list of node selector requirements by
                                node's fields.
                              items:
                                description: A node selector requirement is a selector
                                  that contains values, a key, and an operator that
                                  relates the key and values.
                                properties:
                                  key:
                                    description: The label key that the selector applies
                                      to.
                                    type: string
                                  operator:
                                    description: Represents a key's relationship to
                                      a set of values. Valid operators are In, NotIn,
                                      Exists, DoesNotExist. Gt, and Lt.
                                    type: string
                                  values:
                                    description: An array of string values. If the
                                      operator is In or NotIn, the values array must
                                      be non-empty. If the operator is Exists or DoesNotExist,
                                      the values array must be empty. If the operator
                                      is Gt or Lt, the values array must have a single
                                      element, which will be interpreted as an integer.
                                      This array is replaced during a strategic merge
                                      patch.
                                    items:
                                      type: string
                                    type: array
                                required:
                                - key
                                - operator
                                type: object
                              type: array
                          type: object
                        patch:
                          description: Indicates the patch for the templateSpec Now
                            support strategic merge path :https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/#notes-on-the-strategic-merge-patch
                            Patch takes precedence over Replicas fields If the Patch
                            also modifies the Replicas, use the Replicas value in
                            the Patch
                          type: object
                        replicas:
                          description: Indicates the number of the pod to be created
                            under this pool.
                          format: int32
                          type: integer
                        tolerations:
                          description: Indicates the tolerations the pods under this
                            pool have. A pool's tolerations is not allowed to be updated.
                          items:
                            description: The pod this Toleration is attached to tolerates
                              any taint that matches the triple <key,value,effect>
                              using the matching operator <operator>.
                            properties:
                              effect:
                                description: Effect indicates the taint effect to
                                  match. Empty means match all taint effects. When
                                  specified, allowed values are NoSchedule, PreferNoSchedule
                                  and NoExecute.
                                type: string
                              key:
                                description: Key is the taint key that the toleration
                                  applies to. Empty means match all taint keys. If
                                  the key is empty, operator must be Exists; this
                                  combination means to match all values and all keys.
                                type: string
                              operator:
                                description: Operator represents a key's relationship
                                  to the value. Valid operators are Exists and Equal.
                                  Defaults to Equal. Exists is equivalent to wildcard
                                  for value, so that a pod can tolerate all taints
                                  of a particular category.
                                type: string
                              tolerationSeconds:
                                description: TolerationSeconds represents the period
                                  of time the toleration (which must be of effect
                                  NoExecute, otherwise this field is ignored) tolerates
                                  the taint. By default, it is not set, which means
                                  tolerate the taint forever (do not evict). Zero
                                  and negative values will be treated as 0 (evict
                                  immediately) by the system.
                                format: int64
                                type: integer
                              value:
                                description: Value is the taint value the toleration
                                  matches to. If the operator is Exists, the value
                                  should be empty, otherwise just a regular string.
                                type: string
                            type: object
                          type: array
                      required:
                      - name
                      type: object
                    type: array
                type: object
              workloadTemplate:
                description: WorkloadTemplate describes the pool that will be created.
                properties:
                  deploymentTemplate:
                    description: Deployment template
                    properties:
                      metadata:
                        x-kubernetes-preserve-unknown-fields: true
                      spec:
                        x-kubernetes-preserve-unknown-fields: true
                    required:
                    - spec
                    type: object
                  statefulSetTemplate:
                    description: StatefulSet template
                    properties:
                      metadata:
                        x-kubernetes-preserve-unknown-fields: true
                      spec:
                        x-kubernetes-preserve-unknown-fields: true
                    required:
                    - spec
                    type: object
                type: object
            required:
            - selector
            type: object
          status:
            description: YurtAppSetStatus defines the observed state of YurtAppSet.
            properties:
              collisionCount:
                description: Count of hash collisions for the YurtAppSet. The YurtAppSet
                  controller uses this field as a collision avoidance mechanism when
                  it needs to create the name for the newest ControllerRevision.
                format: int32
                type: integer
              conditions:
                description: Represents the latest available observations of a YurtAppSet's
                  current state.
                items:
                  description: YurtAppSetCondition describes current state of a YurtAppSet.
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition.
                      type: string
                    reason:
                      description: The reason for the condition's last transition.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of in place set condition.
                      type: string
                  type: object
                type: array
              currentRevision:
                description: CurrentRevision, if not empty, indicates the current
                  version of the YurtAppSet.
                type: string
              observedGeneration:
                description: ObservedGeneration is the most recent generation observed
                  for this YurtAppSet. It corresponds to the YurtAppSet's generation,
                  which is updated on mutation by the API Server.
                format: int64
                type: integer
              poolReplicas:
                additionalProperties:
                  format: int32
                  type: integer
                description: Records the topology detail information of the replicas
                  of each pool.
                type: object
              readyReplicas:
                description: The number of ready replicas.
                format: int32
                type: integer
              replicas:
                description: Replicas is the most recently observed number of replicas.
                format: int32
                type: integer
              templateType:
                description: TemplateType indicates the type of PoolTemplate
                type: string
            required:
            - currentRevision
            - replicas
            - templateType
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: yurt-manager-role
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - secret
  verbs:
  - create
  - get
  - list
  - patch
  - update
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - mutatingwebhookconfigurations
  verbs:
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - validatingwebhookconfigurations
  verbs:
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - apps
  resources:
  - controllerrevisions
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - apps
  resources:
  - daemonsets
  verbs:
  - get
  - list
  - update
  - watch
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - apps
  resources:
  - deployments/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - apps
  resources:
  - statefulsets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - apps
  resources:
  - statefulsets/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - apps.openyurt.io
  resources:
  - nodepools
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - apps.openyurt.io
  resources:
  - nodepools/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - apps.openyurt.io
  resources:
  - staticpods
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - apps.openyurt.io
  resources:
  - staticpods/finalizers
  verbs:
  - update
- apiGroups:
  - apps.openyurt.io
  resources:
  - staticpods/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - apps.openyurt.io
  resources:
  - yurtappdaemons
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - apps.openyurt.io
  resources:
  - yurtappdaemons/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - apps.openyurt.io
  resources:
  - yurtappsets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - apps.openyurt.io
  resources:
  - yurtappsets/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - certificates.k8s.io
  resources:
  - certificatesigningrequests
  verbs:
  - create
  - get
  - list
  - watch
- apiGroups:
  - certificates.k8s.io
  resources:
  - certificatesigningrequests/approval
  verbs:
  - update
- apiGroups:
  - certificates.k8s.io
  resourceNames:
  - kubernetes.io/kube-apiserver-client
  - kubernetes.io/kubelet-serving
  resources:
  - signers
  verbs:
  - approve
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - endpoints
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - persistentvolumeclaims
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - crd.projectcalico.org
  resources:
  - blockaffinities
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - patch
  - watch
- apiGroups:
  - raven.openyurt.io
  resources:
  - gateways
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - raven.openyurt.io
  resources:
  - gateways/finalizers
  verbs:
  - update
- apiGroups:
  - raven.openyurt.io
  resources:
  - gateways/status
  verbs:
  - get
  - patch
  - update
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  creationTimestamp: null
  name: yurt-manager-mutating-webhook-configuration
webhooks:
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    service:
      name: webhook-service
      namespace: kube-system
      path: /mutate-raven-openyurt-io-v1alpha1-gateway
  failurePolicy: Fail
  name: mutate.raven.v1alpha1.gateway.openyurt.io
  rules:
  - apiGroups:
    - raven.openyurt.io
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    - UPDATE
    resources:
    - gateways
  sideEffects: None
- admissionReviewVersions:
  - v1
  clientConfig:
    service:
      name: webhook-service
      namespace: kube-system
      path: /mutate-apps-openyurt-io-v1beta1-nodepool
  failurePolicy: Fail
  name: m.v1beta1.nodepool.kb.io
  rules:
  - apiGroups:
    - apps.openyurt.io
    apiVersions:
    - v1beta1
    operations:
    - CREATE
    - UPDATE
    resources:
    - nodepools
  sideEffects: None
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    service:
      name: webhook-service
      namespace: kube-system
      path: /mutate-apps-openyurt-io-v1alpha1-staticpod
  failurePolicy: Fail
  name: mutate.apps.v1alpha1.staticpod.openyurt.io
  rules:
  - apiGroups:
    - apps.openyurt.io
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    - UPDATE
    resources:
    - staticpods
  sideEffects: None
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    service:
      name: webhook-service
      namespace: kube-system
      path: /mutate-apps-openyurt-io-v1alpha1-yurtappdaemon
  failurePolicy: Fail
  name: mutate.apps.v1alpha1.yurtappdaemon.openyurt.io
  rules:
  - apiGroups:
    - apps.openyurt.io
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    - UPDATE
    resources:
    - yurtappdaemons
  sideEffects: None
- admissionReviewVersions:
  - v1
  clientConfig:
    service:
      name: webhook-service
      namespace: kube-system
      path: /mutate-apps-openyurt-io-v1alpha1-yurtappset
  failurePolicy: Fail
  name: myurtappset.kb.io
  rules:
  - apiGroups:
    - apps.openyurt.io
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    - UPDATE
    resources:
    - yurtappsets
  sideEffects: None
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  creationTimestamp: null
  name: yurt-manager-validating-webhook-configuration
webhooks:
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    service:
      name: webhook-service
      namespace: kube-system
      path: /validate-raven-openyurt-io-v1alpha1-gateway
  failurePolicy: Fail
  name: validate.raven.v1alpha1.gateway.openyurt.io
  rules:
  - apiGroups:
    - raven.openyurt.io
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    - UPDATE
    resources:
    - gateways
  sideEffects: None
- admissionReviewVersions:
  - v1
  clientConfig:
    service:
      name: webhook-service
      namespace: kube-system
      path: /validate-apps-openyurt-io-v1beta1-nodepool
  failurePolicy: Fail
  name: v.v1beta1.nodepool.kb.io
  rules:
  - apiGroups:
    - apps.openyurt.io
    apiVersions:
    - v1beta1
    operations:
    - CREATE
    - UPDATE
    - DELETE
    resources:
    - nodepools
  sideEffects: None
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    service:
      name: webhook-service
      namespace: kube-system
      path: /validate-apps-openyurt-io-v1alpha1-staticpod
  failurePolicy: Fail
  name: validate.apps.v1alpha1.staticpod.openyurt.io
  rules:
  - apiGroups:
    - apps.openyurt.io
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    - UPDATE
    resources:
    - staticpods
  sideEffects: None
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    service:
      name: webhook-service
      namespace: kube-system
      path: /validate-apps-openyurt-io-v1alpha1-yurtappdaemon
  failurePolicy: Fail
  name: validate.apps.v1alpha1.yurtappdaemon.openyurt.io
  rules:
  - apiGroups:
    - apps.openyurt.io
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    - UPDATE
    resources:
    - yurtappdaemons
  sideEffects: None
- admissionReviewVersions:
  - v1
  clientConfig:
    service:
      name: webhook-service
      namespace: kube-system
      path: /validate-apps-openyurt-io-v1alpha1-yurtappset
  failurePolicy: Fail
  name: vyurtappset.kb.io
  rules:
  - apiGroups:
    - apps.openyurt.io
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    - UPDATE
    resources:
    - yurtappsets
  sideEffects: None
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    service:
      name: webhook-service
      namespace: kube-system
      path: /validate-core-openyurt-io-v1-pod
  failurePolicy: Fail
  name: validate.core.v1.pod.openyurt.io
  rules:
  - apiGroups:
    - ""
    apiVersions:
    - v1
    operations:
    - DELETE
    resources:
    - pods
  sideEffects: None
