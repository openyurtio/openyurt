apiVersion: apps.openyurt.io/v1alpha1
kind: StaticPod
metadata:
  name: yurt-hub
  namespace: {{ include "openyurt.namespace" . }}
spec:
  staticPodManifest: yurt-hub
  template:
    metadata:
      labels:
        k8s-app: yurt-hub
      name: yurt-hub
      namespace: {{ include "openyurt.namespace" . }}
    spec:
      volumes:
        - name: hub-dir
          hostPath:
            path: /var/lib/yurthub
            type: DirectoryOrCreate
        - name: kubernetes
          hostPath:
            path: /etc/kubernetes
            type: Directory
        - name: pem-dir
          hostPath:
            path: /var/lib/kubelet/pki
            type: Directory
      containers:
        - name: yurt-hub
          image: "{{ .Values.yurtHub.Image.registry }}/{{ .Values.yurtHub.Image.repository }}:{{ .Values.yurtHub.Image.tag }}"
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: hub-dir
              mountPath: /var/lib/yurthub
            - name: kubernetes
              mountPath: /etc/kubernetes
            - name: pem-dir
              mountPath: /var/lib/kubelet/pki
          command:
            - yurthub
            - --v=2
            - --bind-address={{ .Values.yurtHub.yurthubServerAddr }}
            - --server-addr={{`{{.kubernetesServerAddr}}`}}
            - --node-name=$(NODE_NAME)
            - --bootstrap-file={{ .Values.yurtHub.bootstrapFile }}
            - --working-mode={{`{{.workingMode}}`}}
            - --namespace={{ include "openyurt.namespace" . }}
              {{`{{if .organizations }}`}}
            - --hub-cert-organizations={{`{{.organizations}}`}}
              {{`{{end}}`}}
          livenessProbe:
            httpGet:
              host: {{ .Values.yurtHub.yurthubServerAddr | quote }}
              path: /v1/healthz
              port: 10267
            initialDelaySeconds: 300
            periodSeconds: 5
            failureThreshold: 3
          resources:
            requests:
              cpu: 150m
              memory: 150Mi
            limits:
              memory: 300Mi
          securityContext:
            capabilities:
              add: [ "NET_ADMIN", "NET_RAW" ]
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
      hostNetwork: true
      priorityClassName: system-node-critical
      priority: 2000001000
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: read-static-pod-cm
rules:
  - apiGroups:
    - ""
    resources:
    - configmaps
    resourceNames:
    - static-pod-cm-{{ include "openyurt.namespace" . }}-yurt-hub
    verbs:
    - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: read-static-pod-cm-bootstrap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: read-static-pod-cm
subjects:
  - apiGroup: rbac.authorization.k8s.io
    kind: Group
    name: system:bootstrappers


